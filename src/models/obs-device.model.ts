export interface IObsDevice {
  device_id: number;
  poller_id: string;
  hostname: string;
  sys_name: string;
  label: string;
  ip: string;
  snmp_community: string;
  snmp_version: string;
  snmp_port: string;
  ssh_port: string;
  agent_version: string;
  snmp_transport: string;
  snmp_engine_id: string;
  sys_object_id: string;
  sys_descr: string;
  sys_contact: string;
  version: string;
  hardware: string;
  vendor: string;
  features: string;
  location: string;
  os: string;
  status: string;
  status_type: string;
  ignore: string;
  disabled: string;
  purpose: string;
  type: string;
  serial: string;
  location_id: string;
  location_lat: string;
  location_lon: string;
  location_country: string;
  location_state: string;
  location_county: string;
  location_city: string;
  location_manual: string;
  discover_lsp: string;
  discover_services: string;
  enable_ports_adsl: string;
  enable_ports_etherlike: string;
  enable_ports_fdbcount: string;
  override_sys_location_bool: string;
  override_sys_location_string: string;
}

export const transformObserviumDeviceResponse = (response: any) => {
  return {
    device_id: parseInt(response.device_id),
    poller_id: response.poller_id,
    hostname: response.hostname,
    sys_name: response.sysName,
    label: response.label,
    ip: response.ip,
    snmp_community: response.snmp_community,
    snmp_version: response.snmp_version,
    snmp_port: response.snmp_port,
    ssh_port: response.ssh_port,
    agent_version: response.agent_version,
    snmp_transport: response.snmp_transport,
    snmp_engine_id: response.snmpEngineID,
    sys_object_id: response.sysObjectID,
    sys_descr: response.sysDescr,
    sys_contact: response.sysContact,
    version: response.version,
    hardware: response.hardware,
    vendor: response.vendor,
    features: response.features,
    location: response.location,
    os: response.os,
    status: response.status,
    status_type: response.status_type,
    ignore: response.ignore,
    disabled: response.disabled,
    purpose: response.purpose,
    type: response.type,
    serial: response.serial,
    location_id: response.location_id,
    location_lat: response.location_lat,
    location_lon: response.location_lon,
    location_country: response.location_country,
    location_state: response.location_state,
    location_county: response.location_county,
    location_city: response.location_city,
    location_manual: response.location_manual,
    discover_lsp: response.discover_lsp,
    discover_services: response.discover_services,
    enable_ports_adsl: response.enable_ports_adsl,
    enable_ports_etherlike: response.enable_ports_etherlike,
    enable_ports_fdbcount: response.enable_ports_fdbcount,
    override_sys_location_bool: response.override_sysLocation_bool,
    override_sys_location_string: response.override_sysLocation_string,
  };
};
